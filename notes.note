
# Game rules

· Game rules
· Minion buff rules
· Minion card rules


E.g.
Game rules: Minions have two moves
Minion buff rules: Minion cannot move
Minion card rules: Minion have +1 moves


Minion stats to be determined through RuleEngine
· can move
· moves
· can attack
· attacks
· can be damaged
· can be healed
· life

OR: Minion has a list of Tags, e.g.
enum Tag {
    Life(value :Int);
    Attack(value :Int);
    CanBeDamaged(value :Bool);
    //...
}
Minion = {
    tags: Set<Tag> // could be implemented as Map<String, Tag> where string is Type.enumName(Tag)
}


# Card rule handling
Card rules can be implemented like:
* Class, implementing some functions, e.g.
```
class Unicorn implements Card {
    public function on_played() {
        // ...
    }
}
```
* events, e.g.
```
// unicorn setup code, e.g. a class or struct
// ...
var card = game.addCard(unicorn);
card.listen('on_played', function() { /* ... */ }); // event by string
card.listen(CardEvents.OnPlayed, function() { /* ... */ }); // event by enum

// OR
var unicorn = {
    triggers: {
        on_played: function() {}
    }
}
// ...
if (card.triggers.on_played != null) card.triggers.on_played();
```


# Rules execution:

1. Run through all triggers
2. Did any trigger run, if so go to 1.

For instance, a card deals 3 damage to a minion, M, when played (like Lightning Bolt):

[update state]:

1. Run all triggers for 'damage_dealt'
2. Minion M triggers
3. [update state]
4. M dies triggering 'minion_died'
5. Run all triggers for 'minion_died'
6. Minion M2 has 'Gets +1/+1 when a friendly minion dies' and triggers,
7. [update state]

Question: What about an ability that said 'Has an additional attack if an enemy minion has 2 or more attack' at this point?
Maybe a single `update(trigger :Trigger) :Bool` function, where minion can handle any trigger or ignore trigger --> Might as well use an Always trigger
Should [update state] be run before new event is triggered? (see 2., 3. and 4.)

Test case:
Minion has 'Create 0/2 Sheep when killed'. Minion is killed with an area-of-effect spell; the 0/2 Sheep should be created afterwards. That is, the triggered effect should trigger *after* the area-of-effect spell trigger has finished.


Idea: Game tags that can be listened to, e.g.

class GameTag {
    var listeners;
    var entity;
    var value;

    public function new(entity :Entity, value :Int) {
        this.entity = entity; // is entity required?
        this.value = value;
    }
    
    public function listen(func :GameTag -> Void) {
        listeners.push_back(func);
    }
    
    public function set(value :Int) {
        if (value == this.value) return;
        
        this.value = value;
        for (listener in listeners) {
            listener(this);
        }
    }
}

Push/pop changes to game tags, e.g. (newest change to oldest change)
* Minion gets its moves doubled (e.g. spell): Push 3
* Minion has +1 moves (intrinsinc property): Push 1
* Minions have 2 moves as default (game rule): Push 2
Default: 0
=> Moves: 0 + 2 + 1 + 3 = 6

* Minion gets its moves doubled (e.g. spell): Push 3
* Minion cannot move (e.g. spell): Pop all changes
* Minion has +1 moves (intrinsinc property): Push 1
* Minions have 2 moves as default (game rule): Push 2
Default: 0
=> Moves: 0

Changes = [2, 1, 3];


OR simply save current minion move count + a "can move"-property
