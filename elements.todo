
Extremely simple game:
 ☐ One type of card - 1/1 unit with no casting cost
 ☐ Possible actions
     ☐ Play card
     ☐ Move unit
     ☐ Attack unit with unit
     ☐ End turn
 ☐ Plain page to trigger actions and observe result

Slightly less simple game:
 ☐ Attack unit with unit via GUI
 ☐ Draw a card at the beginning of the players turn
 ☐ Refactor code
 ☐ Implement energy sources
 ☐ Implement spells
 ☐ Consider expanding spells with precondition information about targets, e.g. { targets: ["unit"] } or { targets: ["unit", "energy-source", "player"]}
 ☐ Implement basic spell script system

Somewhat simple game:
 ☐ Fix introduced bug: Playing spells on units does not work
 ☐ Split into /client and /server and let server.js require('./server/api') instead
 ☐ Implement card cost
 ☐ Collect all available player actions
     ☐ Move
     ☐ Attack
     ☐ Play
     ☐ End turn
     ☐ Implement unit placement restrictions
     ☐ Implement winning/losing condition
 ☐ Handle two players
 ☐ Implement a basic AI
 ☐ Replenish unit attack and move counts
 ☐ Replenish energy

Simple game:
 ☐ Defender does not attack
 ☐ Create a unit with an ability
 ☐ Handle paying for spells when generating list of possible actions
 ☐ Shuffle libraries at game start
 ☐ Handle two human players
 ☐ Naive greedy AI: Improve AI by selecting the best possible action amount the available

Persistent games:
 ☐ Multiple games in progress at once
 ☐ Users in database
 ☐ Games in database
 ☐ Game actions in database
 ☐ Page to view games
 ☐ Load initial state from database
 ☐ Notify players when it's their turn
 ☐ Clean up old code and files

Improved persistent games:
 ☐ Store all cards in database
 ☐ Handle decks of cards in database
 ☐ Clean up gameactions.js
     ☐ Make a pure Map class
     ☐ Make an Entity class to represent an unit/tower/energy object on the map. Should inherit from eventEmitter
     ☐ Move the non-specific functions into prototype objects
     ☐ Create a utilities-decorator can takes state as an argument OR add utilities functions directly to state
     ☐ Move calculation of possible actions into its own module
     ☐ Remove redundant guards
 ☐ Improve the way game states are requested
 ☐ Possible to play start-to-end against AI
     ☐ Handle AI players
     ☐ Create AI players with decks
     ☐ Fix bug: All cards with same ID are removed from hand when one is played
     ☐ Make handle to create/modify an AI player and its deck
 ☐ Make a new deployment to heroku

Sails:
    ☐ Add game as a Service
    ☐ Hook up game such that it can be called from controllers
    ☐ Change game model to have an initial state, list of actions and current state
    ☐ Move AI code into a AIService
    ☐ Move replayer code into a ReplayService
    ☐ Add card model
    ☐ Bootstrap card data base with cards
    ☐ Instantiate a new game with libraries of cards
    ☐ Game needs to check if map.get() exists instead of tile.type === 'empty'
    ☐ Able to perform the following actions via HTTP posts
        ☐ Play unit
        ☐ Move unit
        ☐ Attack unit
        ☐ End turn
        ☐ Play spell
    ☐ Game state should be the following:
        ☐ Initial state
        ☐ List of:
            ☐ Action
            ☐ State
            ☐ (State diff.)
    ☐ Create QueryService
    ☐ Create ScriptService
    ☐ Find suitable names for files
    ☐ Make UI for hands

Improved gameplay:
 ☐ Implement event system for relevant classes
 ☐ Make system for handling effects on entities (push/remove from stack)
 ☐ Handle "until end of turn"-effects
 ☐ Improve game system to allow more complex cards (e.g. react to stage changes)
     ☐ Test case: Unit that has "~ has +2 to attack when it is your turn and +2 to life when it is other players turns"
     ☐ Test case: Unit that has "Draw a card when ~ damages an energy source"
     ☐ Additional optional test cases:
         ☐ Test case: Unit that has "Attacks the first enemy unit within range in other players turns"
         ☐ Test case: Spell that has "Gain control of target unit"
         ☐ Test case: Unit that has "Allies spawned within [range 1] of ~ gain +1 to attack"
 ☐ Class for composing a query of the game state
 ☐ Make custom "on"-function takes multiple keys and guards against invalid bindings
 ☐ Trim the data that is sent to the player (e.g. remove library, enemy hand etc.)
 ☐ Unit tests

--- ✄ -----------------------

Misc. improvements:
 ☐ Include an "About"-page that has technologies used, game icons and music credit etc..
 ☐ Include a "Page guide" functionality menu item that uses Chardin.js to give static page help
 ☐ Improve page guide descriptions
 ☐ Include a game manual page
 ☐ Make an API that takes/returns only JSON data
 ☐ Make the client-side completely AngularJS-based
 ☐ Deck editor
 ☐ Simplify website UI
 ☐ A live event-stream (on the front page?)

Hexagonal grid:
 ☐ Make basic KineticJS implementation of map rendering
     ☐ Render hexagons
     ☐ Being able to click hexagon
     ☐ Select/deselect tile
     ☐ Make an underlaying hex grid with hex pieces on top
     ☐ Move unit
     ☐ Attack unit
     ☐ Make a custom hex kineticjs class
 ☐ Make hex-map class

Optimizations:
 ☐ gzip compression
 ☐ Add socket.io for web network communication
 ☐ Compile and persist the content of spell script files instead of reading them up on each execution
 ☐ Maybe a bad idea: Share gameactions.js between both client and server and allow the client to do all actions (note: what about spells?) offline until EndTurn(). Persist the actions and send them when ending the turn.
 ☐ Get list of all players units and use that for the current state instead of querying it each time
 ☐ Get list of all players energy sources and use that for the current state instead of querying it each time
 ☐ Make a socket only API that simply returns actions for the client to use, instead of returning all states (bad idea - too much client-side logic?)
 ☐ Switch from underscore to lo-dash

Very high-level long-term additions:
 ☐ Adventure mode
     ☐ Large, persistant world
     ☐ x moves per y time unit (e.g. 10 moves per hour)
 ☐ Leaderboards
 ☐ Achievements
 ☐ Different maps
 ☐ Different game types (capture the flag, tower defence, etc.)
 ☐ Game/board/card/player statistics
 ☐ Ability to edit/create cards
 ☐ Ability to edit/create maps
 ☐ Ability to edit/create AI
 ☐ Player progress (improve stats over time and level)
 ☐ User-created content
     ☐ Cards (moderators only?)
     ☐ Maps
     ☐ AI's
     ☐ Game modes?
