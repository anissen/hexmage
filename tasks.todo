
Simple vanilla game (0.1):
    ✔ No minions on board @done (23-04-15 22:20)
    ✔ 5 cards in starting hand @done (26-04-15 14:25)
    ✔ 10 card deck (5 card in hand, 5 in deck) @done (26-04-15 14:25)
    ✔ Vanilla minions @done (26-04-15 14:25)

Simple slightly challenging game (0.2):
    ✔ Basic AI @done (21-05-15 22:31)

Simple magical game (0.3):
    ✔ Spell card: 2 damage to a minion @done (23-05-15 21:33)
    ✔ Minion with 2 moves/turn @done (23-05-15 21:47)
    ✔ Minion with rule: "When this minion dies, draw a card" @done (24-05-15 11:03)

Simple costly game (0.4):
    ✔ Simple linear mana availability (ie. +1 mana/turn) @done (24-05-15 21:09)
    ✔ Highlight cards that can be cast @done (24-05-15 21:38)
    ✔ Subtract card cost from mana pool @done (24-05-15 21:38)

Simple heroic game (0.5):
    ✔ Hero type that starts on board @done (24-05-15 22:03)
    ✔ Hero must be killed for winning/losing @done (24-05-15 22:16)

Simple claimable game (0.6):
    ☐ Hero claims tiles
    ☐ Claimed tiles provide the mana
    ☐ Minions must be played along claimed tiles

Simple hexagonal game (0.7):
    ☐ Make tiles hexagonal

--- ✄ -----------------------

Tasks:
  ✔ Minimal game @done (10-02-15 19:40)
      ✔ AI vs. human, no deck, no hands, one minion on board each @done (10-02-15 19:40)
      ✔ CLI interface to choose between available actions for human @done (10-02-15 19:40)
      ✔ Multiple minions @done (10-02-15 20:40)
  ☐ Implement rules
  ☐ Make cards into files
  ☐ Make map into file
  ✔ Implement deck @done (19-03-15 21:31)
  ✔ Implement cards in hand @done (19-03-15 21:31)
  ✔ Implement casting minion cards @done (19-03-15 21:31)
  ✔ Implement casting spell cards @done (21-04-15 19:21)
  ☐ Implement targeting spells
  ☐ Implement avatar
  ☐ Implement claimed tiles
  ☐ Implement mana
 
Later:
    ☐ Make minimal game state with, for each player: { minions :Array, cards_in_hand: Int, cards_in_deck :Int } (current player needs concrete list of cards in hand)
    ☐ Replace arrays with Vector for performance
    ☐ Make game state const: http://stackoverflow.com/questions/14556785/what-is-the-syntax-to-declare-const-parameters-and-return-values-in-haxe

Inspiration: https://raw.githubusercontent.com/anissen/elements/master/todo.todo

Card tests:
 ☐ Improve game system to allow more complex cards (e.g. react to stage changes)
     ☐ Test case: Unit that has "~ has +2 to attack when it is your turn and +2 to life when it is other players turns"
     ☐ Test case: Unit that has "Draw a card when ~ damages an energy source"
     ☐ Additional optional test cases:
         ☐ Test case: Unit that has "Attacks the first enemy unit within range in other players turns"
         ☐ Test case: Spell that has "Gain control of target unit"
         ☐ Test case: Unit that has "Allies spawned within [range 1] of ~ gain +1 to attack"
